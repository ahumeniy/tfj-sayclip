<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:tb="http://www.hardcodet.net/taskbar"
                    xmlns:local="clr-namespace:sayclipTray">

    <!-- The taskbar context menu - the first row is a dummy to show off simple data binding -->
    <!--
        The "shared" directive is needed if we reopen the sample window a few times - WPF will otherwise
        reuse the same context menu (which is a resource) again (which will have its DataContext set to the old TaskbarIcon)
  -->
    <ContextMenu x:Shared="false" x:Key="SysTrayMenu">
        <MenuItem Header="Show sayclip configuration Window" Command="{Binding ShowWindowCommand}" />
        <MenuItem Header="Hide sayclip configuration Window" Command="{Binding HideWindowCommand}" />
        <MenuItem Header="Pause Sayclip" Command="{Binding PauseSayclipCommand}" />
        <MenuItem Header="Resume Sayclip " Command="{Binding ResumeSayclipCommand}" />
        <MenuItem Header="Enable auto translation" Command="{Binding EnableTranslationCommand}" />
        <MenuItem Header="Disable auto trasnlation" Command="{Binding DisableTranslationCommand}" />
        <MenuItem Header="Select source language" ItemsSource="{Binding  countriCodes}"  >
            <MenuItem.ItemContainerStyle>
                <Style>
                    <Setter Property="MenuItem.Header" Value="{Binding Key}" />
                </Style>
                
            </MenuItem.ItemContainerStyle>
            </MenuItem>

        <MenuItem Header="Select target language" >
           <MenuItem Header="blob" /> 
        </MenuItem>


        <MenuItem Header="Exit sayclip" Command="{Binding ExitApplicationCommand}" />
    </ContextMenu>


    <!-- the application's NotifyIcon - started from App.xaml.cs. Declares its own view model. -->
    <tb:TaskbarIcon x:Key="NotifyIcon"
                    IconSource="/Red.ico"
                    ToolTipText="Sayclip"
                    DoubleClickCommand="{Binding ShowWindowCommand}"
                    ContextMenu="{StaticResource SysTrayMenu}">

        <!-- self-assign a data context (could also be done programmatically) -->
        <tb:TaskbarIcon.DataContext>
            <local:NotifyIconViewModel />
        </tb:TaskbarIcon.DataContext>
    </tb:TaskbarIcon>

</ResourceDictionary>